/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Sistema;

import java.beans.PropertyVetoException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;

/**
 *
 * @author Catherine
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    
    private UsuarioNuevo nuevoU;
    private UsuarioEditar editarU;
    private UsuarioEliminar eliminarU;
    private FuncionarioNuevo nuevoF;
    private FuncionarioEditar editarF;
    private FuncionarioEliminar eliminarF;
    private PerfilNuevo nuevoP;
    private PerfilEditar editarP;
    private PerfilEliminar eliminarP;
    private CargoNuevo nuevoC;
    private CargoEditar editarC;
    private CargoElim eliminarC;
    private NivelNuevo nuevoN;
    private NivelEditar editarN;
    private NivelEliminar eliminarN;
    private PermisoNuevo NuevoP;
    private PermisoEliminar EliminarP;
    private PermisoEditar editarPer;
    private PermisoAprobado aprobadoP;
    private PermisoPendiente pendienteP;
    private PermisoRechazado rechazadoP;
    private HistorialFuncionario historialF;
    private HistorialGeneral historialG;
    
    public Menu() {
        initComponents();
        setLocationRelativeTo(null);
        NuevoPerfil.setVisible(false);
        EliminarPerfil.setVisible(false);
        switch (Login.user.getPerfil()){
            case 2:
                Administracion.setVisible(false);
                Pendiente.setVisible(false);
                break;
            case 3:
                Administracion.setVisible(false);
                GestionPermisos.setVisible(false);
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        deskPrincipal = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        Administracion = new javax.swing.JMenu();
        GestionUsuario = new javax.swing.JMenu();
        NuevoUsu = new javax.swing.JMenuItem();
        EditarUsu = new javax.swing.JMenuItem();
        EliminarUsu = new javax.swing.JMenuItem();
        GestionFuncionario = new javax.swing.JMenu();
        NuevoFun = new javax.swing.JMenuItem();
        EditarFun = new javax.swing.JMenuItem();
        EliminarFun = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        NuevoPerfil = new javax.swing.JMenuItem();
        EditarPerfil = new javax.swing.JMenuItem();
        EliminarPerfil = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        NuevoCargo = new javax.swing.JMenuItem();
        EditarCargo = new javax.swing.JMenuItem();
        EliminarCargo = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        NuevoNivel = new javax.swing.JMenuItem();
        EditarNivel = new javax.swing.JMenuItem();
        EliminarNivel = new javax.swing.JMenuItem();
        Permisos = new javax.swing.JMenu();
        GestionPermisos = new javax.swing.JMenu();
        NuevoPer = new javax.swing.JMenuItem();
        EditarPer = new javax.swing.JMenuItem();
        EliminarPer = new javax.swing.JMenuItem();
        Aprobado = new javax.swing.JMenuItem();
        Pendiente = new javax.swing.JMenuItem();
        Rechazado = new javax.swing.JMenuItem();
        Historial = new javax.swing.JMenu();
        HistorialFun = new javax.swing.JMenuItem();
        HistorialTotal = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(640, 480));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));
        getContentPane().add(deskPrincipal);

        Administracion.setText("Administración");

        GestionUsuario.setText("Gestión Usuarios");

        NuevoUsu.setText("Nuevo Usuario");
        NuevoUsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoUsuActionPerformed(evt);
            }
        });
        GestionUsuario.add(NuevoUsu);

        EditarUsu.setText("Editar Usuario");
        EditarUsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarUsuActionPerformed(evt);
            }
        });
        GestionUsuario.add(EditarUsu);

        EliminarUsu.setText("Eliminar Usuario");
        EliminarUsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarUsuActionPerformed(evt);
            }
        });
        GestionUsuario.add(EliminarUsu);

        Administracion.add(GestionUsuario);

        GestionFuncionario.setText("Gestión Funcionarios");

        NuevoFun.setText("Nuevo Funcionario");
        NuevoFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoFunActionPerformed(evt);
            }
        });
        GestionFuncionario.add(NuevoFun);

        EditarFun.setText("Editar Funcionario");
        EditarFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarFunActionPerformed(evt);
            }
        });
        GestionFuncionario.add(EditarFun);

        EliminarFun.setText("Eliminar Funcionario");
        EliminarFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarFunActionPerformed(evt);
            }
        });
        GestionFuncionario.add(EliminarFun);

        Administracion.add(GestionFuncionario);

        jMenu3.setText("Gestión Perfiles");

        NuevoPerfil.setText("Nuevo Perfil");
        NuevoPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoPerfilActionPerformed(evt);
            }
        });
        jMenu3.add(NuevoPerfil);

        EditarPerfil.setText("Editar Perfil");
        EditarPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarPerfilActionPerformed(evt);
            }
        });
        jMenu3.add(EditarPerfil);

        EliminarPerfil.setText("Eliminar Perfil");
        EliminarPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarPerfilActionPerformed(evt);
            }
        });
        jMenu3.add(EliminarPerfil);

        Administracion.add(jMenu3);

        jMenu4.setText("Gestión Cargos");

        NuevoCargo.setText("Nuevo Cargo");
        NuevoCargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoCargoActionPerformed(evt);
            }
        });
        jMenu4.add(NuevoCargo);

        EditarCargo.setText("Editar Cargo");
        EditarCargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarCargoActionPerformed(evt);
            }
        });
        jMenu4.add(EditarCargo);

        EliminarCargo.setText("Eliminar Cargo");
        EliminarCargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarCargoActionPerformed(evt);
            }
        });
        jMenu4.add(EliminarCargo);

        Administracion.add(jMenu4);

        jMenu5.setText("Gestión Niveles");

        NuevoNivel.setText("Nuevo Nivel");
        NuevoNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoNivelActionPerformed(evt);
            }
        });
        jMenu5.add(NuevoNivel);

        EditarNivel.setText("Editar Nivel");
        EditarNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarNivelActionPerformed(evt);
            }
        });
        jMenu5.add(EditarNivel);

        EliminarNivel.setText("Eliminar Nivel");
        EliminarNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarNivelActionPerformed(evt);
            }
        });
        jMenu5.add(EliminarNivel);

        Administracion.add(jMenu5);

        jMenuBar1.add(Administracion);

        Permisos.setText("Permisos");

        GestionPermisos.setText("Gestión Permisos");

        NuevoPer.setText("Nuevo Permiso");
        NuevoPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoPerActionPerformed(evt);
            }
        });
        GestionPermisos.add(NuevoPer);

        EditarPer.setText("Editar Permiso");
        EditarPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarPerActionPerformed(evt);
            }
        });
        GestionPermisos.add(EditarPer);

        EliminarPer.setText("Eliminar Permiso");
        EliminarPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarPerActionPerformed(evt);
            }
        });
        GestionPermisos.add(EliminarPer);

        Permisos.add(GestionPermisos);

        Aprobado.setText("Aprobados");
        Aprobado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AprobadoActionPerformed(evt);
            }
        });
        Permisos.add(Aprobado);

        Pendiente.setText("Pendientes");
        Pendiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PendienteActionPerformed(evt);
            }
        });
        Permisos.add(Pendiente);

        Rechazado.setText("Rechazados");
        Rechazado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RechazadoActionPerformed(evt);
            }
        });
        Permisos.add(Rechazado);

        jMenuBar1.add(Permisos);

        Historial.setText("Historial");

        HistorialFun.setText("Por funcionario");
        HistorialFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistorialFunActionPerformed(evt);
            }
        });
        Historial.add(HistorialFun);

        HistorialTotal.setText("General");
        HistorialTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistorialTotalActionPerformed(evt);
            }
        });
        Historial.add(HistorialTotal);

        jMenuBar1.add(Historial);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EditarUsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarUsuActionPerformed
        if(EstaCerrado(editarU)){
            editarU = new UsuarioEditar();
            editarU.setVisible(true);
            deskPrincipal.add(editarU);
            try {
                editarU.setMaximum(true);
                editarU.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           editarU.toFront();
           editarU.requestFocus();
       }
    }//GEN-LAST:event_EditarUsuActionPerformed

    private void NuevoUsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoUsuActionPerformed
       if(EstaCerrado(nuevoU)){
            nuevoU = new UsuarioNuevo();
            nuevoU.setVisible(true);
            deskPrincipal.add(nuevoU);
            try {
                nuevoU.setMaximum(true);
                nuevoU.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           nuevoU.toFront();
           nuevoU.requestFocus();
       }
    }//GEN-LAST:event_NuevoUsuActionPerformed

    private void EliminarUsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarUsuActionPerformed
        if(EstaCerrado(eliminarU)){
            eliminarU = new UsuarioEliminar();
            eliminarU.setVisible(true);
            deskPrincipal.add(eliminarU);
            try {
                eliminarU.setMaximum(true);
                eliminarU.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            eliminarU.toFront();
            eliminarU.requestFocus();
        }
    }//GEN-LAST:event_EliminarUsuActionPerformed

    private void NuevoPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoPerfilActionPerformed
        if(EstaCerrado(nuevoP)){
            nuevoP = new PerfilNuevo();
            nuevoP.setVisible(true);
            deskPrincipal.add(nuevoP);
            try {
                nuevoP.setMaximum(true);
                nuevoP.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           nuevoP.toFront();
           nuevoP.requestFocus();
       }
    }//GEN-LAST:event_NuevoPerfilActionPerformed

    private void EditarPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarPerfilActionPerformed
        if(EstaCerrado(editarP)){
            editarP = new PerfilEditar();
            editarP.setVisible(true);
            deskPrincipal.add(editarP);
            try {
                editarP.setMaximum(true);
                editarP.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           editarP.toFront();
           editarP.requestFocus();
       }
    }//GEN-LAST:event_EditarPerfilActionPerformed

    private void EliminarPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarPerfilActionPerformed
        if(EstaCerrado(editarP)){
            eliminarP = new PerfilEliminar();
            eliminarP.setVisible(true);
            deskPrincipal.add(eliminarP);
            try {
                eliminarP.setMaximum(true);
                eliminarP.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           eliminarP.toFront();
           eliminarP.requestFocus();
       }
    }//GEN-LAST:event_EliminarPerfilActionPerformed

    private void NuevoCargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoCargoActionPerformed
        if(EstaCerrado(nuevoC)){
            nuevoC = new CargoNuevo();
            nuevoC.setVisible(true);
            deskPrincipal.add(nuevoC);
            try {
                nuevoC.setMaximum(true);
                nuevoC.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           nuevoC.toFront();
           nuevoC.requestFocus();
       }
    }//GEN-LAST:event_NuevoCargoActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        new Login().setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void EditarCargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarCargoActionPerformed
        if(EstaCerrado(editarC)){
            editarC = new CargoEditar();
            editarC.setVisible(true);
            deskPrincipal.add(editarC);
            try {
                editarC.setMaximum(true);
                editarC.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           editarC.toFront();
           editarC.requestFocus();
       }
    }//GEN-LAST:event_EditarCargoActionPerformed

    private void EliminarCargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarCargoActionPerformed
        if(EstaCerrado(eliminarC)){
            eliminarC = new CargoElim();
            eliminarC.setVisible(true);
            deskPrincipal.add(eliminarC);
            try {
                eliminarC.setMaximum(true);
                eliminarC.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           eliminarC.toFront();
           eliminarC.requestFocus();
       }
    }//GEN-LAST:event_EliminarCargoActionPerformed

    private void NuevoNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoNivelActionPerformed
        if(EstaCerrado(nuevoN)){
            nuevoN = new NivelNuevo();
            nuevoN.setVisible(true);
            deskPrincipal.add(nuevoN);
            try {
                nuevoN.setMaximum(true);
                nuevoN.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           nuevoN.toFront();
           nuevoN.requestFocus();
       }
    }//GEN-LAST:event_NuevoNivelActionPerformed

    private void EditarNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarNivelActionPerformed
        if(EstaCerrado(editarN)){
            editarN = new NivelEditar();
            editarN.setVisible(true);
            deskPrincipal.add(editarN);
            try {
                editarN.setMaximum(true);
                editarN.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           editarN.toFront();
           editarN.requestFocus();
       }
    }//GEN-LAST:event_EditarNivelActionPerformed

    private void EliminarNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarNivelActionPerformed
        if(EstaCerrado(eliminarN)){
            eliminarN = new NivelEliminar();
            eliminarN.setVisible(true);
            deskPrincipal.add(eliminarN);
            try {
                eliminarN.setMaximum(true);
                eliminarN.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           eliminarN.toFront();
           eliminarN.requestFocus();
       }
    }//GEN-LAST:event_EliminarNivelActionPerformed

    private void NuevoFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoFunActionPerformed
        if(EstaCerrado(nuevoF)){
            nuevoF = new FuncionarioNuevo();
            nuevoF.setVisible(true);
            deskPrincipal.add(nuevoF);
            try {
                nuevoF.setMaximum(true);
                nuevoF.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           nuevoF.toFront();
           nuevoF.requestFocus();
       }
    }//GEN-LAST:event_NuevoFunActionPerformed

    private void EditarFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarFunActionPerformed
        if(EstaCerrado(editarF)){
            editarF = new FuncionarioEditar();
            editarF.setVisible(true);
            deskPrincipal.add(editarF);
            try {
                editarF.setMaximum(true);
                editarF.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           editarF.toFront();
           editarF.requestFocus();
       }
    }//GEN-LAST:event_EditarFunActionPerformed

    private void EliminarFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarFunActionPerformed
        if(EstaCerrado(eliminarF)){
            eliminarF = new FuncionarioEliminar();
            eliminarF.setVisible(true);
            deskPrincipal.add(eliminarF);
            try {
                eliminarF.setMaximum(true);
                eliminarF.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           eliminarF.toFront();
           eliminarF.requestFocus();
       }
    }//GEN-LAST:event_EliminarFunActionPerformed

    private void NuevoPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoPerActionPerformed
        // TODO add your handling code here:
        
         if(EstaCerrado(NuevoP)){
            NuevoP = new PermisoNuevo();
            NuevoP.setVisible(true);
            deskPrincipal.add(NuevoP);
            try {
                NuevoP.setMaximum(true);
                NuevoP.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           NuevoP.toFront();
           NuevoP.requestFocus();
       }
         
    }//GEN-LAST:event_NuevoPerActionPerformed

    private void EliminarPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarPerActionPerformed
        // TODO add your handling code here:
         if(EstaCerrado(EliminarP)){
            EliminarP = new PermisoEliminar();
            EliminarP.setVisible(true);
            deskPrincipal.add(EliminarP);
            try {
                EliminarP.setMaximum(true);
                EliminarP.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           EliminarP.toFront();
           EliminarP.requestFocus();
       }
        
    }//GEN-LAST:event_EliminarPerActionPerformed

    private void EditarPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarPerActionPerformed
        // TODO add your handling code here:
         if(EstaCerrado(editarPer)){
            editarPer = new PermisoEditar();
            editarPer.setVisible(true);
            deskPrincipal.add(editarPer);
            try {
                editarPer.setMaximum(true);
                editarPer.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           editarPer.toFront();
           editarPer.requestFocus();
       }
    }//GEN-LAST:event_EditarPerActionPerformed

    private void AprobadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AprobadoActionPerformed
        if(EstaCerrado(aprobadoP)){
            aprobadoP = new PermisoAprobado();
            aprobadoP.setVisible(true);
            deskPrincipal.add(aprobadoP);
            try {
                aprobadoP.setMaximum(true);
                aprobadoP.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           aprobadoP.toFront();
           aprobadoP.requestFocus();
       }
    }//GEN-LAST:event_AprobadoActionPerformed

    private void PendienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PendienteActionPerformed
        if(EstaCerrado(pendienteP)){
            pendienteP = new PermisoPendiente();
            pendienteP.setVisible(true);
            deskPrincipal.add(pendienteP);
            try {
                pendienteP.setMaximum(true);
                pendienteP.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           pendienteP.toFront();
           pendienteP.requestFocus();
       }
    }//GEN-LAST:event_PendienteActionPerformed

    private void RechazadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RechazadoActionPerformed
        if(EstaCerrado(rechazadoP)){
            rechazadoP = new PermisoRechazado();
            rechazadoP.setVisible(true);
            deskPrincipal.add(rechazadoP);
            try {
                rechazadoP.setMaximum(true);
                rechazadoP.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           rechazadoP.toFront();
           rechazadoP.requestFocus();
       }
    }//GEN-LAST:event_RechazadoActionPerformed

    private void HistorialFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistorialFunActionPerformed
        if(EstaCerrado(historialF)){
            historialF = new HistorialFuncionario();
            historialF.setVisible(true);
            deskPrincipal.add(historialF);
            try {
                historialF.setMaximum(true);
                historialF.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           historialF.toFront();
           historialF.requestFocus();
       }
    }//GEN-LAST:event_HistorialFunActionPerformed

    private void HistorialTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistorialTotalActionPerformed
        if(EstaCerrado(historialG)){
            historialG = new HistorialGeneral();
            historialG.setVisible(true);
            deskPrincipal.add(historialG);
            try {
                historialG.setMaximum(true);
                historialG.moveToFront();
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       else{
           historialG.toFront();
           historialG.requestFocus();
       }
    }//GEN-LAST:event_HistorialTotalActionPerformed

    public boolean EstaCerrado(Object obj){
        JInternalFrame[] activos = deskPrincipal.getAllFrames();
        boolean cerrado = true;
        int i=0;
        while(i < activos.length && cerrado){
            if(activos[i]==obj){
                cerrado = false;
            }
            i++;
        }
        return cerrado;
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Administracion;
    private javax.swing.JMenuItem Aprobado;
    private javax.swing.JMenuItem EditarCargo;
    private javax.swing.JMenuItem EditarFun;
    private javax.swing.JMenuItem EditarNivel;
    private javax.swing.JMenuItem EditarPer;
    private javax.swing.JMenuItem EditarPerfil;
    private javax.swing.JMenuItem EditarUsu;
    private javax.swing.JMenuItem EliminarCargo;
    private javax.swing.JMenuItem EliminarFun;
    private javax.swing.JMenuItem EliminarNivel;
    private javax.swing.JMenuItem EliminarPer;
    private javax.swing.JMenuItem EliminarPerfil;
    private javax.swing.JMenuItem EliminarUsu;
    private javax.swing.JMenu GestionFuncionario;
    private javax.swing.JMenu GestionPermisos;
    private javax.swing.JMenu GestionUsuario;
    private javax.swing.JMenu Historial;
    private javax.swing.JMenuItem HistorialFun;
    private javax.swing.JMenuItem HistorialTotal;
    private javax.swing.JMenuItem NuevoCargo;
    private javax.swing.JMenuItem NuevoFun;
    private javax.swing.JMenuItem NuevoNivel;
    private javax.swing.JMenuItem NuevoPer;
    private javax.swing.JMenuItem NuevoPerfil;
    private javax.swing.JMenuItem NuevoUsu;
    private javax.swing.JMenuItem Pendiente;
    private javax.swing.JMenu Permisos;
    private javax.swing.JMenuItem Rechazado;
    private javax.swing.JDesktopPane deskPrincipal;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
